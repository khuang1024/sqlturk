package sqlturk.util.tableaux;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashSet;

import sqlturk.configuration.Parameters;

/**
 * TableauxUtil will maintain the set of created FK dependency tables. NOTE:
 * TableauxUtil is a singleton class! Get the only one instance by getInstance.
 * 
 */
@Deprecated
class ForeignKeyConstraintUtil {
    static HashSet<String> createdFKRelations = new HashSet<String>();

    static void clearCreatedFKRelations() {
	createdFKRelations = null;
	createdFKRelations = new HashSet<String>();
    }

    /**
     * Create the FK dependency table for the given table
     * 
     * @param relationName
     *            the target relation whose FK dependency relation are supposed
     *            to be generated by this function.
     * @param conn
     *            the DB connection object.
     * @return the name of the created FK dependency relation.
     * @throws SQLException
     */
    private static String createFKRelation(String relationName, Connection conn)
	    throws SQLException {
	String tableName = Parameters.FK_CONSTRAINT_TABLE_PREFIX + relationName
		+ Parameters.FK_CONSTRAINT_TABLE_SUFFIX;
	String query = "";
	query += "CREATE TABLE " + tableName + "\n";
	query += "AS\n";
	query += "SELECT\n";
	query += "	TABLE_NAME AS " + Parameters.FK_CONSTRAINT_COLUMN_TABLE_NAME
		+ ", COLUMN_NAME AS "
		+ Parameters.FK_CONSTRAINT_COLUMN_COLUMN_NAME
		+ ", REFERENCED_TABLE_SCHEMA AS "
		+ Parameters.FK_CONSTRAINT_COLUMN_REFERENCED_TABLE_SCHEMA
		+ ", REFERENCED_TABLE_NAME AS "
		+ Parameters.FK_CONSTRAINT_COLUMN_REFERENCED_TABLE_NAME
		+ ", REFERENCED_COLUMN_NAME AS "
		+ Parameters.FK_CONSTRAINT_COLUMN_REFERENCED_COLUMN_NAME + "\n";
	query += "FROM \n";
	query += "	information_schema.KEY_COLUMN_USAGE \n";
	query += "WHERE\n";
	query += "	TABLE_NAME='" + relationName
		+ "' and TABLE_NAME<>REFERENCED_TABLE_NAME";
	Statement stmt = conn.createStatement();

	// debug
	// System.out.println("debug:\ttableName" + tableName);

	stmt.executeUpdate("DROP TABLE IF EXISTS " + tableName);
	stmt.executeUpdate(query);
	stmt.close();

	// put the "translated" relation in the createdFKRelations, for future
	// use.
	return tableName;
    }

    private static ArrayList<String> recursivelyCreateFKRelation(
	    String relationName, Connection conn) throws SQLException {

	// debug
	// System.out.println("debug:\t in recursively - relation: " +
	// relationName);

	ArrayList<String> referencedRelations = new ArrayList<String>();

	// if we have it already, just return
	if (createdFKRelations.contains(relationName)) {
	    return null;
	}

	// debug
	// System.out.println("debug:\t in recursively - relation: " +
	// relationName);

	// add the target
	String FKTableName = createFKRelation(relationName, conn);
	createdFKRelations.add(relationName);
	// referencedRelations.add(relationName);

	// get all the referenced tables
	String query = "select * from " + FKTableName;
	Statement stmt = conn.createStatement();
	ResultSet rs = stmt.executeQuery(query);
	while (rs.next()) {
	    referencedRelations.add(rs.getString("REFERENCED_TABLE_NAME"));
	}
	rs.close();
	stmt.close();

	@SuppressWarnings("unchecked")
	ArrayList<String> rfRel = (ArrayList<String>) referencedRelations
		.clone();
	// iteratively create all FK tables for the given table
	for (String rf : rfRel) {
	    if (!createdFKRelations.contains(rf)) {
		referencedRelations
			.addAll(recursivelyCreateFKRelation(rf, conn));
	    }
	}

	// for (String str: referencedRelations) {
	// System.out.println("debug:\t referencedRelations: "+str);
	// }

	return referencedRelations;

    }

    // public static boolean hasFKRelation(String name) {
    // return createdFKRelations.contains(name);
    // }

    static ArrayList<String> getFKConstraintString(String relationName,
	    Connection conn) throws SQLException {
	ArrayList<String> fkConstraintStrings = new ArrayList<String>();
	ArrayList<String> relations = new ArrayList<String>();

	// add the target relation into the relations
	relations.add(relationName);

	// get all the referenced tables
	ArrayList<String> tmp = recursivelyCreateFKRelation(relationName, conn);
	if (tmp != null) {
	    relations.addAll(tmp);
	    tmp.clear();
	}

	for (String relName : relations) {
	    // System.out.println("-debug:\t" + relName);

	    // create the FK dependency tables first
	    Statement stmt = null;
	    ResultSet rs = null;
	    
	    stmt = conn.createStatement();
	    rs = stmt.executeQuery("select * from "
		    + Parameters.FK_CONSTRAINT_TABLE_PREFIX + relName
		    + Parameters.FK_CONSTRAINT_TABLE_SUFFIX);
	    while (rs.next()) {
		String fkConstraint = rs.getString("TABLE_NAME") + "."
			+ rs.getString("COLUMN_NAME") + "="
			+ rs.getString("REFERENCED_TABLE_NAME") + "."
			+ rs.getString("REFERENCED_COLUMN_NAME");
		fkConstraintStrings.add(fkConstraint);
	    }
	    if (rs != null) {
		rs.close();
	    }
	    if (stmt != null) {
		stmt.close();
	    }
	}

	return fkConstraintStrings;
    }

    public static void main(String[] args) {

    }
}
